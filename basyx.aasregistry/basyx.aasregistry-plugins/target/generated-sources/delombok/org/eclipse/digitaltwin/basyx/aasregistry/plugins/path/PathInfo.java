// Generated by delombok at Mon Jul 28 11:50:04 CEST 2025
package org.eclipse.digitaltwin.basyx.aasregistry.plugins.path;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * ****************************************************************************
 * Copyright (C) 2023 DFKI GmbH (https://www.dfki.de/en/web)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * SPDX-License-Identifier: MIT
 * ****************************************************************************
 */
public class PathInfo {
	private GenerationTarget pathsTarget;
	private GenerationTarget processorTarget;
	private String inputClassPackageName;
	private Set<ConstantInfo> constants;
	private ModelInfo rootModel;
	private Set<PrimitiveRange> primitiveRanges;
	private Set<ModelInfo> models;
	private Set<ModelInfo> allModels;


	private static class PrimitiveRange {
		private boolean functional;
		private String range;

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean isFunctional() {
			return this.functional;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getRange() {
			return this.range;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setFunctional(final boolean functional) {
			this.functional = functional;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setRange(final String range) {
			this.range = range;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof PathInfo.PrimitiveRange)) return false;
			final PathInfo.PrimitiveRange other = (PathInfo.PrimitiveRange) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			if (this.isFunctional() != other.isFunctional()) return false;
			final java.lang.Object this$range = this.getRange();
			final java.lang.Object other$range = other.getRange();
			if (this$range == null ? other$range != null : !this$range.equals(other$range)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof PathInfo.PrimitiveRange;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			result = result * PRIME + (this.isFunctional() ? 79 : 97);
			final java.lang.Object $range = this.getRange();
			result = result * PRIME + ($range == null ? 43 : $range.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public java.lang.String toString() {
			return "PathInfo.PrimitiveRange(functional=" + this.isFunctional() + ", range=" + this.getRange() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public PrimitiveRange(final boolean functional, final String range) {
			this.functional = functional;
			this.range = range;
		}
	}


	public static class ConstantInfo {
		private String name;
		private String nameUpper;

		ConstantInfo(String name) {
			this.name = name;
			this.nameUpper = ConstantGenerator.generateConstant(name);
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getName() {
			return this.name;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getNameUpper() {
			return this.nameUpper;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setName(final String name) {
			this.name = name;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setNameUpper(final String nameUpper) {
			this.nameUpper = nameUpper;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof PathInfo.ConstantInfo)) return false;
			final PathInfo.ConstantInfo other = (PathInfo.ConstantInfo) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			final java.lang.Object this$name = this.getName();
			final java.lang.Object other$name = other.getName();
			if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
			final java.lang.Object this$nameUpper = this.getNameUpper();
			final java.lang.Object other$nameUpper = other.getNameUpper();
			if (this$nameUpper == null ? other$nameUpper != null : !this$nameUpper.equals(other$nameUpper)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof PathInfo.ConstantInfo;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $name = this.getName();
			result = result * PRIME + ($name == null ? 43 : $name.hashCode());
			final java.lang.Object $nameUpper = this.getNameUpper();
			result = result * PRIME + ($nameUpper == null ? 43 : $nameUpper.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public java.lang.String toString() {
			return "PathInfo.ConstantInfo(name=" + this.getName() + ", nameUpper=" + this.getNameUpper() + ")";
		}
	}


	public static abstract class RelationInfo {
		private String methodName;
		private String attributeNameUpperFirst;
		private String attributeName;
		private String attributeNameUpper;
		private boolean listRange;

		RelationInfo(String methodName, String attributeName, boolean isListRange) {
			this.methodName = methodName;
			this.attributeNameUpperFirst = toUpperFirst(attributeName);
			this.listRange = isListRange;
			this.attributeNameUpper = ConstantGenerator.generateConstant(attributeName);
		}

		public abstract String getGetterPrefix();

		private String toUpperFirst(String name) {
			if (name.length() < 1) {
				return name;
			}
			return "" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getMethodName() {
			return this.methodName;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getAttributeNameUpperFirst() {
			return this.attributeNameUpperFirst;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getAttributeName() {
			return this.attributeName;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getAttributeNameUpper() {
			return this.attributeNameUpper;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean isListRange() {
			return this.listRange;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setMethodName(final String methodName) {
			this.methodName = methodName;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setAttributeNameUpperFirst(final String attributeNameUpperFirst) {
			this.attributeNameUpperFirst = attributeNameUpperFirst;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setAttributeName(final String attributeName) {
			this.attributeName = attributeName;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setAttributeNameUpper(final String attributeNameUpper) {
			this.attributeNameUpper = attributeNameUpper;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setListRange(final boolean listRange) {
			this.listRange = listRange;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof PathInfo.RelationInfo)) return false;
			final PathInfo.RelationInfo other = (PathInfo.RelationInfo) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			if (this.isListRange() != other.isListRange()) return false;
			final java.lang.Object this$methodName = this.getMethodName();
			final java.lang.Object other$methodName = other.getMethodName();
			if (this$methodName == null ? other$methodName != null : !this$methodName.equals(other$methodName)) return false;
			final java.lang.Object this$attributeNameUpperFirst = this.getAttributeNameUpperFirst();
			final java.lang.Object other$attributeNameUpperFirst = other.getAttributeNameUpperFirst();
			if (this$attributeNameUpperFirst == null ? other$attributeNameUpperFirst != null : !this$attributeNameUpperFirst.equals(other$attributeNameUpperFirst)) return false;
			final java.lang.Object this$attributeName = this.getAttributeName();
			final java.lang.Object other$attributeName = other.getAttributeName();
			if (this$attributeName == null ? other$attributeName != null : !this$attributeName.equals(other$attributeName)) return false;
			final java.lang.Object this$attributeNameUpper = this.getAttributeNameUpper();
			final java.lang.Object other$attributeNameUpper = other.getAttributeNameUpper();
			if (this$attributeNameUpper == null ? other$attributeNameUpper != null : !this$attributeNameUpper.equals(other$attributeNameUpper)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof PathInfo.RelationInfo;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			result = result * PRIME + (this.isListRange() ? 79 : 97);
			final java.lang.Object $methodName = this.getMethodName();
			result = result * PRIME + ($methodName == null ? 43 : $methodName.hashCode());
			final java.lang.Object $attributeNameUpperFirst = this.getAttributeNameUpperFirst();
			result = result * PRIME + ($attributeNameUpperFirst == null ? 43 : $attributeNameUpperFirst.hashCode());
			final java.lang.Object $attributeName = this.getAttributeName();
			result = result * PRIME + ($attributeName == null ? 43 : $attributeName.hashCode());
			final java.lang.Object $attributeNameUpper = this.getAttributeNameUpper();
			result = result * PRIME + ($attributeNameUpper == null ? 43 : $attributeNameUpper.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public java.lang.String toString() {
			return "PathInfo.RelationInfo(methodName=" + this.getMethodName() + ", attributeNameUpperFirst=" + this.getAttributeNameUpperFirst() + ", attributeName=" + this.getAttributeName() + ", attributeNameUpper=" + this.getAttributeNameUpper() + ", listRange=" + this.isListRange() + ")";
		}
	}


	public static class PrimitiveRangeRelationInfo extends RelationInfo {
		private String typeName;

		public PrimitiveRangeRelationInfo(String methodName, String attributeName, String typeName, boolean isListRange) {
			super(methodName, attributeName, isListRange);
			this.typeName = typeName;
		}

		@Override
		public String getGetterPrefix() {
			if ("Boolean".equals(typeName)) {
				return "is";
			}
			return "get";
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public java.lang.String toString() {
			return "PathInfo.PrimitiveRangeRelationInfo(typeName=" + this.getTypeName() + ")";
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof PathInfo.PrimitiveRangeRelationInfo)) return false;
			final PathInfo.PrimitiveRangeRelationInfo other = (PathInfo.PrimitiveRangeRelationInfo) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			if (!super.equals(o)) return false;
			final java.lang.Object this$typeName = this.getTypeName();
			final java.lang.Object other$typeName = other.getTypeName();
			if (this$typeName == null ? other$typeName != null : !this$typeName.equals(other$typeName)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof PathInfo.PrimitiveRangeRelationInfo;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final java.lang.Object $typeName = this.getTypeName();
			result = result * PRIME + ($typeName == null ? 43 : $typeName.hashCode());
			return result;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getTypeName() {
			return this.typeName;
		}
	}


	public static class ComplexRangeRelationInfo extends RelationInfo {
		private String modelName;

		public ComplexRangeRelationInfo(String methodName, String attributeName, String rangeName, boolean isListRange) {
			super(methodName, attributeName, isListRange);
			this.modelName = rangeName;
		}

		@Override
		public String getGetterPrefix() {
			return "get";
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof PathInfo.ComplexRangeRelationInfo)) return false;
			final PathInfo.ComplexRangeRelationInfo other = (PathInfo.ComplexRangeRelationInfo) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			if (!super.equals(o)) return false;
			final java.lang.Object this$modelName = this.getModelName();
			final java.lang.Object other$modelName = other.getModelName();
			if (this$modelName == null ? other$modelName != null : !this$modelName.equals(other$modelName)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof PathInfo.ComplexRangeRelationInfo;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final java.lang.Object $modelName = this.getModelName();
			result = result * PRIME + ($modelName == null ? 43 : $modelName.hashCode());
			return result;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getModelName() {
			return this.modelName;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setModelName(final String modelName) {
			this.modelName = modelName;
		}
	}


	public static class BaseConfig {
		private final boolean skipLists;
		private final Map<String, ModelInfo> lookupTable = new HashMap<>();

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean isSkipLists() {
			return this.skipLists;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public Map<String, ModelInfo> getLookupTable() {
			return this.lookupTable;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof PathInfo.BaseConfig)) return false;
			final PathInfo.BaseConfig other = (PathInfo.BaseConfig) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			if (this.isSkipLists() != other.isSkipLists()) return false;
			final java.lang.Object this$lookupTable = this.getLookupTable();
			final java.lang.Object other$lookupTable = other.getLookupTable();
			if (this$lookupTable == null ? other$lookupTable != null : !this$lookupTable.equals(other$lookupTable)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof PathInfo.BaseConfig;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			result = result * PRIME + (this.isSkipLists() ? 79 : 97);
			final java.lang.Object $lookupTable = this.getLookupTable();
			result = result * PRIME + ($lookupTable == null ? 43 : $lookupTable.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public java.lang.String toString() {
			return "PathInfo.BaseConfig(skipLists=" + this.isSkipLists() + ", lookupTable=" + this.getLookupTable() + ")";
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public BaseConfig(final boolean skipLists) {
			this.skipLists = skipLists;
		}
	}


	public static class ModelInfo {
		private final String name;
		private String singlePathConstructor;
		private String pathAndSegmentConstructor;
		private List<String> subModels;
		private List<PrimitiveRangeRelationInfo> primitiveRangeRelations = new LinkedList<>();
		private List<ComplexRangeRelationInfo> complexRangeRelations = new LinkedList<>();
		private PathInfo info; // backpointer for global access in templates		

		public ModelInfo(String name) {
			this.name = name;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getName() {
			return this.name;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getSinglePathConstructor() {
			return this.singlePathConstructor;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getPathAndSegmentConstructor() {
			return this.pathAndSegmentConstructor;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public List<String> getSubModels() {
			return this.subModels;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public List<PrimitiveRangeRelationInfo> getPrimitiveRangeRelations() {
			return this.primitiveRangeRelations;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public List<ComplexRangeRelationInfo> getComplexRangeRelations() {
			return this.complexRangeRelations;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public PathInfo getInfo() {
			return this.info;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setSinglePathConstructor(final String singlePathConstructor) {
			this.singlePathConstructor = singlePathConstructor;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setPathAndSegmentConstructor(final String pathAndSegmentConstructor) {
			this.pathAndSegmentConstructor = pathAndSegmentConstructor;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setSubModels(final List<String> subModels) {
			this.subModels = subModels;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setPrimitiveRangeRelations(final List<PrimitiveRangeRelationInfo> primitiveRangeRelations) {
			this.primitiveRangeRelations = primitiveRangeRelations;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setComplexRangeRelations(final List<ComplexRangeRelationInfo> complexRangeRelations) {
			this.complexRangeRelations = complexRangeRelations;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public void setInfo(final PathInfo info) {
			this.info = info;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof PathInfo.ModelInfo)) return false;
			final PathInfo.ModelInfo other = (PathInfo.ModelInfo) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			final java.lang.Object this$name = this.getName();
			final java.lang.Object other$name = other.getName();
			if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
			final java.lang.Object this$singlePathConstructor = this.getSinglePathConstructor();
			final java.lang.Object other$singlePathConstructor = other.getSinglePathConstructor();
			if (this$singlePathConstructor == null ? other$singlePathConstructor != null : !this$singlePathConstructor.equals(other$singlePathConstructor)) return false;
			final java.lang.Object this$pathAndSegmentConstructor = this.getPathAndSegmentConstructor();
			final java.lang.Object other$pathAndSegmentConstructor = other.getPathAndSegmentConstructor();
			if (this$pathAndSegmentConstructor == null ? other$pathAndSegmentConstructor != null : !this$pathAndSegmentConstructor.equals(other$pathAndSegmentConstructor)) return false;
			final java.lang.Object this$subModels = this.getSubModels();
			final java.lang.Object other$subModels = other.getSubModels();
			if (this$subModels == null ? other$subModels != null : !this$subModels.equals(other$subModels)) return false;
			final java.lang.Object this$primitiveRangeRelations = this.getPrimitiveRangeRelations();
			final java.lang.Object other$primitiveRangeRelations = other.getPrimitiveRangeRelations();
			if (this$primitiveRangeRelations == null ? other$primitiveRangeRelations != null : !this$primitiveRangeRelations.equals(other$primitiveRangeRelations)) return false;
			final java.lang.Object this$complexRangeRelations = this.getComplexRangeRelations();
			final java.lang.Object other$complexRangeRelations = other.getComplexRangeRelations();
			if (this$complexRangeRelations == null ? other$complexRangeRelations != null : !this$complexRangeRelations.equals(other$complexRangeRelations)) return false;
			final java.lang.Object this$info = this.getInfo();
			final java.lang.Object other$info = other.getInfo();
			if (this$info == null ? other$info != null : !this$info.equals(other$info)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof PathInfo.ModelInfo;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $name = this.getName();
			result = result * PRIME + ($name == null ? 43 : $name.hashCode());
			final java.lang.Object $singlePathConstructor = this.getSinglePathConstructor();
			result = result * PRIME + ($singlePathConstructor == null ? 43 : $singlePathConstructor.hashCode());
			final java.lang.Object $pathAndSegmentConstructor = this.getPathAndSegmentConstructor();
			result = result * PRIME + ($pathAndSegmentConstructor == null ? 43 : $pathAndSegmentConstructor.hashCode());
			final java.lang.Object $subModels = this.getSubModels();
			result = result * PRIME + ($subModels == null ? 43 : $subModels.hashCode());
			final java.lang.Object $primitiveRangeRelations = this.getPrimitiveRangeRelations();
			result = result * PRIME + ($primitiveRangeRelations == null ? 43 : $primitiveRangeRelations.hashCode());
			final java.lang.Object $complexRangeRelations = this.getComplexRangeRelations();
			result = result * PRIME + ($complexRangeRelations == null ? 43 : $complexRangeRelations.hashCode());
			final java.lang.Object $info = this.getInfo();
			result = result * PRIME + ($info == null ? 43 : $info.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public java.lang.String toString() {
			return "PathInfo.ModelInfo(name=" + this.getName() + ", singlePathConstructor=" + this.getSinglePathConstructor() + ", pathAndSegmentConstructor=" + this.getPathAndSegmentConstructor() + ", subModels=" + this.getSubModels() + ", primitiveRangeRelations=" + this.getPrimitiveRangeRelations() + ", complexRangeRelations=" + this.getComplexRangeRelations() + ", info=" + this.getInfo() + ")";
		}
	}


	private static final class ConstantGenerator {
		private ConstantGenerator() {
		}

		public static String generateConstant(String name) {
			StringBuilder builder = new StringBuilder();
			for (int i = 0, len = name.length(); i < len; i++) {
				char c = name.charAt(i);
				if (Character.isUpperCase(c)) {
					builder.append('_');
					builder.append(c);
				} else {
					builder.append(Character.toUpperCase(c));
				}
			}
			return builder.toString();
		}
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public PathInfo() {
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public GenerationTarget getPathsTarget() {
		return this.pathsTarget;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public GenerationTarget getProcessorTarget() {
		return this.processorTarget;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public String getInputClassPackageName() {
		return this.inputClassPackageName;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public Set<ConstantInfo> getConstants() {
		return this.constants;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public ModelInfo getRootModel() {
		return this.rootModel;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public Set<PrimitiveRange> getPrimitiveRanges() {
		return this.primitiveRanges;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public Set<ModelInfo> getModels() {
		return this.models;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public Set<ModelInfo> getAllModels() {
		return this.allModels;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public void setPathsTarget(final GenerationTarget pathsTarget) {
		this.pathsTarget = pathsTarget;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public void setProcessorTarget(final GenerationTarget processorTarget) {
		this.processorTarget = processorTarget;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public void setInputClassPackageName(final String inputClassPackageName) {
		this.inputClassPackageName = inputClassPackageName;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public void setConstants(final Set<ConstantInfo> constants) {
		this.constants = constants;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public void setRootModel(final ModelInfo rootModel) {
		this.rootModel = rootModel;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public void setPrimitiveRanges(final Set<PrimitiveRange> primitiveRanges) {
		this.primitiveRanges = primitiveRanges;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public void setModels(final Set<ModelInfo> models) {
		this.models = models;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public void setAllModels(final Set<ModelInfo> allModels) {
		this.allModels = allModels;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof PathInfo)) return false;
		final PathInfo other = (PathInfo) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$pathsTarget = this.getPathsTarget();
		final java.lang.Object other$pathsTarget = other.getPathsTarget();
		if (this$pathsTarget == null ? other$pathsTarget != null : !this$pathsTarget.equals(other$pathsTarget)) return false;
		final java.lang.Object this$processorTarget = this.getProcessorTarget();
		final java.lang.Object other$processorTarget = other.getProcessorTarget();
		if (this$processorTarget == null ? other$processorTarget != null : !this$processorTarget.equals(other$processorTarget)) return false;
		final java.lang.Object this$inputClassPackageName = this.getInputClassPackageName();
		final java.lang.Object other$inputClassPackageName = other.getInputClassPackageName();
		if (this$inputClassPackageName == null ? other$inputClassPackageName != null : !this$inputClassPackageName.equals(other$inputClassPackageName)) return false;
		final java.lang.Object this$constants = this.getConstants();
		final java.lang.Object other$constants = other.getConstants();
		if (this$constants == null ? other$constants != null : !this$constants.equals(other$constants)) return false;
		final java.lang.Object this$rootModel = this.getRootModel();
		final java.lang.Object other$rootModel = other.getRootModel();
		if (this$rootModel == null ? other$rootModel != null : !this$rootModel.equals(other$rootModel)) return false;
		final java.lang.Object this$primitiveRanges = this.getPrimitiveRanges();
		final java.lang.Object other$primitiveRanges = other.getPrimitiveRanges();
		if (this$primitiveRanges == null ? other$primitiveRanges != null : !this$primitiveRanges.equals(other$primitiveRanges)) return false;
		final java.lang.Object this$models = this.getModels();
		final java.lang.Object other$models = other.getModels();
		if (this$models == null ? other$models != null : !this$models.equals(other$models)) return false;
		final java.lang.Object this$allModels = this.getAllModels();
		final java.lang.Object other$allModels = other.getAllModels();
		if (this$allModels == null ? other$allModels != null : !this$allModels.equals(other$allModels)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof PathInfo;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $pathsTarget = this.getPathsTarget();
		result = result * PRIME + ($pathsTarget == null ? 43 : $pathsTarget.hashCode());
		final java.lang.Object $processorTarget = this.getProcessorTarget();
		result = result * PRIME + ($processorTarget == null ? 43 : $processorTarget.hashCode());
		final java.lang.Object $inputClassPackageName = this.getInputClassPackageName();
		result = result * PRIME + ($inputClassPackageName == null ? 43 : $inputClassPackageName.hashCode());
		final java.lang.Object $constants = this.getConstants();
		result = result * PRIME + ($constants == null ? 43 : $constants.hashCode());
		final java.lang.Object $rootModel = this.getRootModel();
		result = result * PRIME + ($rootModel == null ? 43 : $rootModel.hashCode());
		final java.lang.Object $primitiveRanges = this.getPrimitiveRanges();
		result = result * PRIME + ($primitiveRanges == null ? 43 : $primitiveRanges.hashCode());
		final java.lang.Object $models = this.getModels();
		result = result * PRIME + ($models == null ? 43 : $models.hashCode());
		final java.lang.Object $allModels = this.getAllModels();
		result = result * PRIME + ($allModels == null ? 43 : $allModels.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public java.lang.String toString() {
		return "PathInfo(pathsTarget=" + this.getPathsTarget() + ", processorTarget=" + this.getProcessorTarget() + ", inputClassPackageName=" + this.getInputClassPackageName() + ", constants=" + this.getConstants() + ", rootModel=" + this.getRootModel() + ", primitiveRanges=" + this.getPrimitiveRanges() + ", models=" + this.getModels() + ", allModels=" + this.getAllModels() + ")";
	}
}
