// Generated by delombok at Thu Jul 24 22:59:47 CEST 2025
package org.eclipse.digitaltwin.basyx.aasregistry.plugins.path;

import java.util.List;

/**
 * ****************************************************************************
 * Copyright (C) 2023 DFKI GmbH (https://www.dfki.de/en/web)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * SPDX-License-Identifier: MIT
 * ****************************************************************************
 */
interface PojoClassVisitor {
	void startRelation(PojoRelation relation);

	void endRelation(PojoRelation relation);

	void onSubTypeRelation(String parent, List<String> subTypes);

	boolean startType(String name, boolean isRoot);

	void endType();

	void stop();


	class PojoRelation {
		private final String subject;
		private final String methodName;
		private final String fieldName;
		private final String range;
		private final PojoRelationType type;
		private final boolean isRootRelation;
		private final boolean isPrimitive;


		enum PojoRelationType {
			FUNCTIONAL, LIST, MAP;
		}

		public boolean isComplex() {
			return !isPrimitive;
		}


		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public static class PojoRelationBuilder {
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			private String subject;
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			private String methodName;
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			private String fieldName;
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			private String range;
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			private PojoRelationType type;
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			private boolean isRootRelation;
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			private boolean isPrimitive;

			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			PojoRelationBuilder() {
			}

			/**
			 * @return {@code this}.
			 */
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public PojoClassVisitor.PojoRelation.PojoRelationBuilder subject(final String subject) {
				this.subject = subject;
				return this;
			}

			/**
			 * @return {@code this}.
			 */
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public PojoClassVisitor.PojoRelation.PojoRelationBuilder methodName(final String methodName) {
				this.methodName = methodName;
				return this;
			}

			/**
			 * @return {@code this}.
			 */
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public PojoClassVisitor.PojoRelation.PojoRelationBuilder fieldName(final String fieldName) {
				this.fieldName = fieldName;
				return this;
			}

			/**
			 * @return {@code this}.
			 */
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public PojoClassVisitor.PojoRelation.PojoRelationBuilder range(final String range) {
				this.range = range;
				return this;
			}

			/**
			 * @return {@code this}.
			 */
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public PojoClassVisitor.PojoRelation.PojoRelationBuilder type(final PojoRelationType type) {
				this.type = type;
				return this;
			}

			/**
			 * @return {@code this}.
			 */
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public PojoClassVisitor.PojoRelation.PojoRelationBuilder isRootRelation(final boolean isRootRelation) {
				this.isRootRelation = isRootRelation;
				return this;
			}

			/**
			 * @return {@code this}.
			 */
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public PojoClassVisitor.PojoRelation.PojoRelationBuilder isPrimitive(final boolean isPrimitive) {
				this.isPrimitive = isPrimitive;
				return this;
			}

			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public PojoClassVisitor.PojoRelation build() {
				return new PojoClassVisitor.PojoRelation(this.subject, this.methodName, this.fieldName, this.range, this.type, this.isRootRelation, this.isPrimitive);
			}

			@java.lang.Override
			@java.lang.SuppressWarnings("all")
			@lombok.Generated
			public java.lang.String toString() {
				return "PojoClassVisitor.PojoRelation.PojoRelationBuilder(subject=" + this.subject + ", methodName=" + this.methodName + ", fieldName=" + this.fieldName + ", range=" + this.range + ", type=" + this.type + ", isRootRelation=" + this.isRootRelation + ", isPrimitive=" + this.isPrimitive + ")";
			}
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public static PojoClassVisitor.PojoRelation.PojoRelationBuilder builder() {
			return new PojoClassVisitor.PojoRelation.PojoRelationBuilder();
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getSubject() {
			return this.subject;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getMethodName() {
			return this.methodName;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getFieldName() {
			return this.fieldName;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public String getRange() {
			return this.range;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public PojoRelationType getType() {
			return this.type;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean isRootRelation() {
			return this.isRootRelation;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean isPrimitive() {
			return this.isPrimitive;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public java.lang.String toString() {
			return "PojoClassVisitor.PojoRelation(subject=" + this.getSubject() + ", methodName=" + this.getMethodName() + ", fieldName=" + this.getFieldName() + ", range=" + this.getRange() + ", type=" + this.getType() + ", isRootRelation=" + this.isRootRelation() + ", isPrimitive=" + this.isPrimitive() + ")";
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof PojoClassVisitor.PojoRelation)) return false;
			final PojoClassVisitor.PojoRelation other = (PojoClassVisitor.PojoRelation) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			if (this.isRootRelation() != other.isRootRelation()) return false;
			if (this.isPrimitive() != other.isPrimitive()) return false;
			final java.lang.Object this$subject = this.getSubject();
			final java.lang.Object other$subject = other.getSubject();
			if (this$subject == null ? other$subject != null : !this$subject.equals(other$subject)) return false;
			final java.lang.Object this$methodName = this.getMethodName();
			final java.lang.Object other$methodName = other.getMethodName();
			if (this$methodName == null ? other$methodName != null : !this$methodName.equals(other$methodName)) return false;
			final java.lang.Object this$fieldName = this.getFieldName();
			final java.lang.Object other$fieldName = other.getFieldName();
			if (this$fieldName == null ? other$fieldName != null : !this$fieldName.equals(other$fieldName)) return false;
			final java.lang.Object this$range = this.getRange();
			final java.lang.Object other$range = other.getRange();
			if (this$range == null ? other$range != null : !this$range.equals(other$range)) return false;
			final java.lang.Object this$type = this.getType();
			final java.lang.Object other$type = other.getType();
			if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof PojoClassVisitor.PojoRelation;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			result = result * PRIME + (this.isRootRelation() ? 79 : 97);
			result = result * PRIME + (this.isPrimitive() ? 79 : 97);
			final java.lang.Object $subject = this.getSubject();
			result = result * PRIME + ($subject == null ? 43 : $subject.hashCode());
			final java.lang.Object $methodName = this.getMethodName();
			result = result * PRIME + ($methodName == null ? 43 : $methodName.hashCode());
			final java.lang.Object $fieldName = this.getFieldName();
			result = result * PRIME + ($fieldName == null ? 43 : $fieldName.hashCode());
			final java.lang.Object $range = this.getRange();
			result = result * PRIME + ($range == null ? 43 : $range.hashCode());
			final java.lang.Object $type = this.getType();
			result = result * PRIME + ($type == null ? 43 : $type.hashCode());
			return result;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public PojoRelation(final String subject, final String methodName, final String fieldName, final String range, final PojoRelationType type, final boolean isRootRelation, final boolean isPrimitive) {
			this.subject = subject;
			this.methodName = methodName;
			this.fieldName = fieldName;
			this.range = range;
			this.type = type;
			this.isRootRelation = isRootRelation;
			this.isPrimitive = isPrimitive;
		}
	}
}
